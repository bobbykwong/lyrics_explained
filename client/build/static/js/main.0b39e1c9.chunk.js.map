{"version":3,"sources":["queries/queries.js","components/home/Instruction.jsx","components/home/Howitworks.jsx","components/home/Albumcover.jsx","components/home/Latestrelease.jsx","components/home/Lyricstable.jsx","components/home/Lyricsaddition.jsx","components/song/Banner.jsx","components/song/Lyrics.jsx","components/song/Addinterpretation.jsx","components/song/Singleinterpretation.jsx","components/song/Allinterpretations.jsx","components/song/Interpretations.jsx","components/song/Song.jsx","components/home/Nosong.jsx","components/home/Home.jsx","components/layouts/Search.jsx","components/layouts/Navigation.jsx","components/layouts/Footer.jsx","components/addlyrics/Artistsongs.jsx","components/addlyrics/Form.jsx","components/addlyrics/Existingartist.jsx","components/addlyrics/Newartistform.jsx","components/addlyrics/Addlyrics.jsx","App.jsx","index.js"],"names":["GET_SONG","gql","GET_ARTIST","GET_ARTIST_SINGLE","GET_SONGS","ADD_ARTIST","ADD_SONG","ADD_VERSE","ADD_INTERPRETATION","UPDATE_LIKES","Instruction","className","src","alt","Howitworks","Albumcover","Latestrelease","Lyricstable","props","useQuery","loading","error","data","table","songs","map","song","index","key","onClick","getSong","title","scope","artist","name","artist_cover","Lyricsaddition","Banner","songData","artistName","artistImg","songTitle","Lyrics","verses","verseArray","i","length","position","content","id","lyrics","el","verseLinesStyled","split","e","showInterpretations","Interpretation","verseIndex","useState","interpretations","setInterpretations","useMutation","addInterpretation","type","placeholder","aria-label","onChange","target","value","preventDefault","variables","likes","verse_id","refetchQueries","query","awaitRefetchQueries","then","results","console","log","addingInterpretation","Singleinterpretation","interpretationID","updateLikes","addLike","Allinterpretations","interpretationsSorted","currentEl","allInterpretations","page","refetch","Addinterpretation","Song","setIndex","Interpretations","Nosong","Home","setTitle","clickedSong","recentSong","Search","setSong","showSong","findSong","Navigation","to","homePageClick","Footer","Artistsongs","songTable","songList","button","songIndex","addLyrics","Form","artistCover","artistID","parseInt","setVerses","addSong","addVerse","verseField","field","addingVerse","onSubmit","artist_id","songID","promises","forEach","push","song_id","Promise","all","window","location","catch","submitHandler","event","Existingartist","setArtist","artistData","setArtistData","setAddSong","showArtist","addNewArtist","Newartistform","setArtistName","setArtistCover","addArtist","Addlyrics","showForm","setShowForm","client","ApolloClient","uri","App","setSongData","path","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b39e1c9.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\n\nconst GET_SONG = gql`\n    query Song($title: String!){\n        song(title: $title) {\n            title\n            id\n            verses{\n                content\n                position\n                id\n                interpretations{\n                    content\n                    likes\n                    id\n                }\n            }\n            artist{\n                name\n                artist_cover\n            }\n        }\n    }\n`;\n\nconst GET_ARTIST = gql`\n    {\n        artist{\n            name\n            songs{\n                title\n            }\n        }\n    }\n`;\n\nconst GET_ARTIST_SINGLE = gql`\n    query Artist($name: String!){\n        artist(name: $name){\n            name\n            artist_cover\n            id\n            songs{\n                title\n            }\n        }\n    }\n`;\n\nconst GET_SONGS = gql`\n    {\n        songs {\n            title\n            artist{\n                name\n                artist_cover\n            }\n        }\n    }\n`;\n\n\nconst ADD_ARTIST = gql`\n    mutation($name: String!, $artist_cover: String!) {\n        addArtist(name: $name, artist_cover: $artist_cover){\n            name\n            id\n            artist_cover\n        }\n    }\n`;\n\nconst ADD_SONG = gql`\n    mutation($title: String!, $artist_id: Int!) {\n        addSong(title: $title, artist_id: $artist_id){\n            title\n            id\n        }\n    }\n`;\n\nconst ADD_VERSE = gql`\n    mutation($content: String!, $position: Int!, $song_id: Int!) {\n        addVerse(content: $content, position: $position, song_id: $song_id){\n            content\n            position\n            id\n        }\n    }\n`;\n\nconst ADD_INTERPRETATION = gql`\n    mutation($content: String!, $likes: Int! $verse_id: Int!) {\n        addInterpretation(content: $content, likes: $likes, verse_id: $verse_id){\n            content\n            likes\n            id\n        }\n    }\n`;\n\nconst UPDATE_LIKES = gql`\n    mutation($likes: Int! $id: Int!) {\n        updateLikes(likes: $likes, id: $id){\n            likes\n            id\n        }\n    }\n`;\n\nexport{\n    GET_SONG,\n    GET_ARTIST,\n    GET_ARTIST_SINGLE,\n    GET_SONGS,\n    ADD_ARTIST,\n    ADD_SONG,\n    ADD_VERSE,\n    ADD_INTERPRETATION,\n    UPDATE_LIKES\n}","import React from 'react'\n\n\nfunction Instruction() {\n    return(\n        <div className=\"instructions\">\n            <div className=\"instruction\">\n                <p>\n                    Search lyrics to your favourite songs\n                </p>\n            </div>\n            <img src=\"/right_arrow.svg\" alt=\"right arrow\" className=\"right-arrow\"/>\n            <div className=\"instruction\">\n                <p>\n                    Read interpretations to lyrics\n                </p>\n            </div>\n            <img src=\"/right_arrow.svg\" alt=\"right arrow\" className=\"right-arrow\"/>\n            <div className=\"instruction\">\n                <p>\n                    Add your own interpretations to lyrics\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default Instruction","import React from 'react'\nimport './Home.css'\nimport Instruction from './Instruction'\n\nfunction Howitworks() {\n    return(\n        <div className=\"instructions-div\">\n            <div className=\"header\">\n                <h2>How It Works</h2>\n            </div>\n            <Instruction />\n        </div>\n    )\n}\n\nexport default Howitworks","import React from 'react'\n\nfunction Albumcover() {\n    return(\n        <div className=\"album-div\">\n            <div className=\"album-cover-div\">\n                <img className=\"album-cover\" src=\"roddy_ricch.jpeg\"/>\n            </div>\n            <div className=\"album-cover-div\">\n                <img className=\"album-cover\" src=\"SZA.png\"/>\n            </div>\n            <div className=\"album-cover-div\">\n                <img className=\"album-cover\" src=\"daniel_caesar.jpg\"/>\n            </div>\n            <div className=\"album-cover-div\">\n                <img className=\"album-cover\" src=\"sabrina_claudio.png\"/>\n            </div>\n        </div>\n    )\n}\n\nexport default Albumcover","import React from 'react';\nimport Albumcover from './Albumcover';\n\nfunction Latestrelease() {\n    return(\n        <div className=\"latest-release\">\n            <div className=\"header\">\n                <h2>Latest release</h2>\n            </div>\n            <Albumcover />\n        </div>\n    )\n}\n\nexport default Latestrelease","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport {gql} from 'apollo-boost';\nimport {GET_SONGS} from '../../queries/queries'\n\n\nfunction Lyricstable(props) {\n    const { loading, error, data } = useQuery(GET_SONGS);\n    if (error) return <p>Error</p>;\n    if (loading || !data) return <p>Loading...</p>;\n\n    const table = data.songs.map((song, index) => {\n        return(\n            <tr key={index} onClick={() => {props.getSong(song.title)}}>\n              <th scope=\"row\">{index}</th>\n              <td>{song.title}</td>\n              <td>{song.artist[0].name}</td>\n              <td><img src={song.artist[0].artist_cover} className=\"artist-cover\"/></td>\n            </tr>\n        )\n    })\n\n    return(\n        <table className=\"table table-hover table-responsive-md lyrics-table\">\n          <tbody>\n            {table}\n          </tbody>\n        </table>\n    )\n}\n\nexport default Lyricstable","import React from 'react'\nimport Lyricstable from './Lyricstable'\n\n\nfunction Lyricsaddition(props) {\n    return(\n        <div className=\"lyrics-addition-div\">\n            <div className=\"header\">\n                <h2>Recent lyrics</h2>\n            </div>\n            <div>\n                <Lyricstable getSong={props.getSong}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Lyricsaddition","import React from 'react'\n\nfunction Banner(props) {\n    // Assiging song data to variables for ease of reference\n    const songData = props.songData\n    const artistName = songData.artist[0].name\n    const artistImg = songData.artist[0].artist_cover\n    const songTitle = songData.title\n\n    return(\n        <div className=\"artist-banner\">\n            <img src={artistImg} className=\"artist-img\" alt=\"artist\"/>\n            <div className=\"artist-info\">\n                <h2 className=\"song-title\">{songTitle}</h2>\n                <h3 className=\"artist-name\">{artistName}</h3>\n            </div>\n        </div>\n    )\n}\n\nexport default Banner","import React from 'react'\n\nfunction Lyrics(props) {\n    // Assiging song data to variables for ease of reference\n    const songData = props.songData\n    const verses = songData.verses\n\n    // Sort verses array based on position\n    let verseArray = []\n    for (var i = 0; i < verses.length; i++) {\n        const versePosition = verses[i].position\n        verseArray[versePosition] = [verses[i].content, verses[i].id]\n    }\n\n    // Map verse array\n    const lyrics = verseArray.map((el, index) => {\n        const content = el[0]\n        const id = el[1]\n        const verseLines = content.split('.')\n\n        const verseLinesStyled = verseLines.map((e, i) => {\n            return(\n                <div key={i}>\n                    <p>{e}</p>\n                </div>\n            )\n        })\n\n        return(\n            <div className=\"verse-para\" key={index} onClick={() => {props.showInterpretations(id)}}>\n                {verseLinesStyled}\n            </div>\n        )\n    })\n\n    return(\n        <div className=\"col-md-6\">\n            <div className=\"all-lyrics\">\n                {lyrics}\n            </div>\n        </div>\n    )\n}\n\nexport default Lyrics","import React, { useState } from 'react'\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {ADD_INTERPRETATION, GET_SONG} from '../../queries/queries'\nimport {gql} from 'apollo-boost';\n\n\nfunction Interpretation(props) {\n    const verseIndex = props.verseIndex\n    const title = props.songData.title\n\n    const [interpretations, setInterpretations] = useState(\"\")\n\n    // Create mutation\n    const [addInterpretation] = useMutation(ADD_INTERPRETATION);\n\n    const addingInterpretation = (e) => {\n        e.preventDefault()\n        addInterpretation({\n            variables: {content: interpretations, likes: 0, verse_id: verseIndex},\n            refetchQueries: [{\n                query: GET_SONG,\n                variables: {title: title}\n            }],\n            awaitRefetchQueries: true,\n        })\n            .then(results => {\n                console.log(results)\n                setInterpretations(\"\")\n            })\n    }\n\n    return(\n        <form className=\"add-interpretation-form\">\n          <textarea className=\"form-control add-interpretation-input\" type=\"search\" placeholder=\"Add your own interpretations\" aria-label=\"Search\" onChange={(e) => {setInterpretations(e.target.value)}}/>\n          <button className=\"btn btn-outline-success my-2 my-sm-0 search-btn add-interpretation-btn\" type=\"submit\" onClick={(e) => {addingInterpretation(e)}}>Add Interpretation</button>\n        </form>\n    )\n}\n\nexport default Interpretation","import React, { useState } from 'react'\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {UPDATE_LIKES, GET_SONG} from '../../queries/queries'\n\n\nfunction Singleinterpretation(props) {\n    let page;\n\n    const content = props.content\n    const likes = props.likes\n    const interpretationID = props.id\n    const title = props.title\n    console.log(title)\n    console.log(likes)\n\n    // Create mutation\n    const [updateLikes] = useMutation(UPDATE_LIKES);\n\n    const addLike = (e) => {\n        e.preventDefault()\n\n        updateLikes({\n            variables: {likes: likes+1, id: interpretationID},\n            refetchQueries: [{\n                query: GET_SONG,\n                variables: {title: `${title}`}\n            }],\n            awaitRefetchQueries: true,\n        })\n    }\n\n    return(\n        <div className=\"single-interpretation-div\">\n            <p className=\"single-interpretation-content\">{content}</p>\n            <img src=\"heart.svg\" className=\"likes-img\" onClick={(e) => {addLike(e)}} />\n            <p className=\"single-interpretation-likes\">{likes}</p>\n        </div>\n    )\n}\n\nexport default Singleinterpretation","import React, { useState } from 'react'\nimport Singleinterpretation from './Singleinterpretation'\n\nfunction Allinterpretations(props) {\n    let page;\n    const songData = props.songData\n    const verseIndex = props.verseIndex\n    const verses = songData.verses\n    const title = songData.title\n\n    // Find interpretations that correspond to verse id\n    let interpretations = [];\n    for (var i = 0; i < verses.length; i++) {\n        if (verseIndex === verses[i].id){\n            interpretations = verses[i].interpretations\n        }\n    }\n\n    // Arrange interpretations based on number of likes\n    let interpretationsSorted\n    if (interpretations.length > 1) {\n        // If there is only one or no interpretations\n        interpretationsSorted = interpretations\n\n        // Sort interpretations with insertion sort rather than bubble sort\n        for (var i = 0; i < interpretations.length; i++) {\n            let currentEl = interpretations[i]\n\n            let e\n            for (e = i-1; e >= 0 && interpretations[e].likes < currentEl.likes; e--) {\n                interpretationsSorted[e+1] = interpretations[e]\n            }\n            interpretationsSorted[e+1] = currentEl\n        }\n\n    }else{\n        interpretationsSorted = interpretations\n    }\n\n    const allInterpretations = interpretationsSorted.map((el, index) => {\n\n        const content = el.content\n        const likes = el.likes\n        const id = el.id\n\n        return (\n            <Singleinterpretation key={index} content={content} likes={likes} id={id} title={title}/>\n        )\n    })\n\n    return(\n        <div>\n            {allInterpretations}\n        </div>\n    )\n}\n\nexport default Allinterpretations","import React from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport {GET_SONG} from '../../queries/queries'\nimport Addinterpretation from './Addinterpretation'\nimport Allinterpretations from './Allinterpretations'\n\n\nfunction Interpretation(props) {\n    // Only show Interpretation on click of verse\n    let page;\n    const songTitle = props.songData.title\n    // Query song\n    const { loading, error, data, refetch } = useQuery(GET_SONG, {variables: {title: songTitle}});\n\n    if (typeof props.verseIndex === \"number\") {\n        // Assiging song data to variables for ease of reference\n        const songData = data.song\n        const verseIndex = props.verseIndex\n\n        page = (\n            <div>\n                <Addinterpretation songData={songData} verseIndex={verseIndex}/>\n                <Allinterpretations songData={songData} verseIndex={verseIndex}/>\n            </div>\n        )\n    }\n\n    return(\n        <div className=\"col-md-6\">\n            {page}\n        </div>\n    )\n}\n\nexport default Interpretation","import React, { useState } from 'react'\nimport './song.css'\nimport Banner from './Banner'\nimport Lyrics from './Lyrics'\nimport Interpretations from './Interpretations'\n\nfunction Song(props) {\n    // Assiging song data to variables for ease of reference\n    const songData = props.songData\n\n    // States\n    const [index, setIndex] = useState(\"\")\n\n    // Show interpretations on click\n    const showInterpretations = (verseIndex) => {\n        setIndex(verseIndex)\n    }\n\n    return(\n        <div>\n            <Banner songData={props.songData}/>\n            <div className=\"container lyrics-container\">\n                <div className=\"row\">\n                    <Lyrics songData={songData} showInterpretations={showInterpretations}/>\n                    <Interpretations songData={songData} verseIndex={index}/>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Song","import React from 'react'\n\n\nfunction Nosong(props) {\n\n\n    return(\n        <div className=\"no-song\">\n            <p className=\"no-song-header\">Whoops we don't know the lyrics to that one</p>\n            <img className=\"no-song-img\" src=\"https://media2.giphy.com/media/SG7BQND0ubI6k/giphy.gif?cid=ecf05e47c2aa20adc03c9af445dd0623142c7331f81cf15c&rid=giphy.gif\" />\n            <p>Help us add the lyrics if you know them!</p>\n        </div>\n    )\n}\n\nexport default Nosong","import React, {useState} from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport {GET_SONG} from '../../queries/queries'\nimport Howitworks from './Howitworks'\nimport Latestrelease from './Latestrelease'\nimport Lyricsaddition from './Lyricsaddition.jsx'\nimport Song from '../song/Song'\nimport Nosong from './Nosong'\n\n\nfunction Home(props) {\n    const [title, setTitle] = useState(null)\n    const [state, setState] = useState(false)\n    const { loading, error, data, refetch } = useQuery(GET_SONG, {variables: {title: title}});\n    // Trigger query when song is clicked\n    const getSong = (songTitle) => {\n        setTitle(songTitle)\n    }\n    const clickedSong = data\n\n    let page;\n    if (!props.songData) {\n        page = <Nosong />\n    }\n    // Show lyrics when song is selected\n    else if (clickedSong) {\n        const recentSong = data.song\n        page = <Song songData={recentSong}/>\n        // setTitle(null)\n    }\n    else if (props.songData.length === 0) {\n        page = (\n            <div>\n                <Howitworks />\n                <Latestrelease />\n                <Lyricsaddition getSong={getSong}/>\n            </div>\n        )\n    }\n    else if ('song' in props.songData) {\n        const song = props.songData.song\n        page = <Song songData={song}/>\n    }\n\n\n\n    return(\n        <div>\n            {page}\n        </div>\n    )\n}\n\nexport default Home","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/react-hooks';\nimport {GET_SONG} from '../../queries/queries'\n\n\nfunction Search(props) {\n    const [song, setSong] = useState(\"\")\n\n    // Query song\n    const { loading, error, data, refetch } = useQuery(GET_SONG, {variables: {title: song}});\n    // Find song on click\n    const findSong = (e) => {\n        e.preventDefault()\n        props.showSong(data)\n    }\n\n    return(\n        <form className=\"form-inline my-2 my-lg-0\">\n          <input className=\"form-control mr-sm-2 search-bar\" type=\"search\" placeholder=\"Search Lyrics\" aria-label=\"Search\" onChange={(e) => {setSong(e.target.value)}}>\n          </input>\n          <button className=\"btn btn-outline-success my-2 my-sm-0 search-btn\" type=\"submit\" onClick={(e) => {findSong(e)}}>Search</button>\n        </form>\n    )\n}\n\nexport default Search","import React from 'react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport '../../App.css';\nimport Search from './Search'\n\nfunction Navigation(props) {\n\n    return(\n        <nav className=\"navbar navbar-dark bg-dark\">\n            <div className=\"navbar-brand\">\n                <Link className=\"navibar\" to=\"/\" onClick={() => {props.homePageClick()}}>Home</Link>\n            </div>\n            <div>\n                <Search showSong={props.showSong}/>\n            </div>\n            <div>\n              <Link className=\"navibar\" to=\"/addlyrics\">Add Lyrics</Link>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navigation","import React from 'react'\nimport '../../App.css';\n\nfunction Footer() {\n    return(\n        <footer className=\"footer-container\">\n            <div className=\"container\">\n                <div className=\"row footer-div\">\n                    <div className=\"col-md-3\">\n                        <h4>Links</h4>\n                        <p>FAQ</p>\n                        <p>Help</p>\n                        <p>Support</p>\n                    </div>\n                    <div className=\"col-md-3\">\n                        <h4>Social</h4>\n                        <p>Facebook</p>\n                        <p>Twitter</p>\n                        <p>Linkedin</p>\n                    </div>\n                    <div className=\"col-md-3\">\n                        <h4>Blog</h4>\n                        <p>About Us</p>\n                        <p>Contact</p>\n                    </div>\n                    <div className=\"col-md-3\">\n                        <h4>Legal</h4>\n                        <p>Terms</p>\n                        <p>Privacy</p>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer","import React from 'react'\n\nfunction Artistsongs(props) {\n    let artistName\n    let songTable\n    let songList\n    let button\n\n    if (\"artist\" in props.data) {\n        const artist = props.data.artist\n        artistName = artist.name\n\n        songList = artist.songs.map((song, songIndex) => {\n            return(\n                <tr key={songIndex}>\n                  <th scope=\"row\">{songIndex}</th>\n                  <td>{song.title}</td>\n                </tr>\n            )\n        })\n\n        songTable = (\n            <table className=\"table artist-song-table\">\n              <tbody>\n                {songList}\n              </tbody>\n            </table>\n        )\n\n        button = <button className=\"btn new-song-btn\" onClick={() => {props.addLyrics()}}>Add Song</button>\n    }\n\n    return(\n        <div>\n            <h3>{artistName}</h3>\n            {button}\n            {songTable}\n        </div>\n    )\n}\n\nexport default Artistsongs","import React, { useState } from 'react';\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {gql} from 'apollo-boost';\nimport {ADD_SONG, ADD_VERSE} from '../../queries/queries';\n\nfunction Form(props) {\n    // Getting artist data from props\n    const artistName = props.data.name\n    const artistCover = props.data.artist_cover\n    const artistID = parseInt(props.data.id)\n\n    console.log(props)\n    // Getting state from the input fields\n    const [title, setTitle] = useState(\"\");\n    const [verses, setVerses] = useState([0]);\n\n    // Creating mutation function\n    const [addSong] = useMutation(ADD_SONG);\n    const [addVerse] = useMutation(ADD_VERSE);\n\n    const addingVerse = (e, index) => {\n        const value = e.target.value\n        const verseArray = verses.map((el, i) => {\n            if (i === index) {\n                return value\n            }else{\n                return el\n            }\n        })\n\n        setVerses(verseArray)\n    }\n\n    const verseField = verses.map((field, index) => {\n        return (\n            <textarea key={index} className=\"form-control input-field\" onChange={(e) => {addingVerse(e, index)}} placeholder=\"Lyrics here. Add a new verse whenever you think it deserves its own set of interpretations\"/>\n        )\n    })\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        addSong({ variables: {title: title, artist_id: artistID} })\n            .then(results => {\n                const songID = parseInt(results.data.addSong.id)\n\n                // Add mutations for verse using loop\n\n                let promises = []\n\n                verses.forEach((el, index) => {\n                    promises.push(addVerse({ variables: {content: el, position: index, song_id: songID}})\n                    )\n                })\n\n                Promise.all(promises)\n                    .then(() => {\n                        window.location = '/'\n                    })\n                    .catch((error) => {\n                        console.error(error)\n                    })\n            })\n            .catch(error => {\n                console.error(error)\n            })\n    }\n\n\n    return(\n        <div>\n            <img src={artistCover} className=\"artist-image\"></img>\n            <h3 className=\"artist-name\">{artistName}</h3>\n\n            <form className=\"lyrics-form text-center\" onSubmit={e => {submitHandler(e)}}>\n                <input className=\"form-control input-field\" placeholder=\"Song Title\" onChange={(event) => setTitle(event.target.value)}/>\n                {verseField}\n                <button type=\"button\" className=\"btn verse-btn mx-auto\" onClick={() => setVerses([...verses, verses.length ])}>New Verse</button>\n                <button type=\"submit\" className=\"btn verse-btn mx-auto\">Submit</button>\n            </form>\n        </div>\n    )\n}\n\n\nexport default Form","import React, {useState} from 'react';\nimport {gql} from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport { GET_ARTIST_SINGLE } from '../../queries/queries'\nimport Artistsongs from './Artistsongs';\nimport Form from './Form';\n\n\nfunction Existingartist(props) {\n    const [artist, setArtist] = useState(\"\");\n    const [findArtist, setFindArtist] = useState(false);\n    const [artistData, setArtistData] = useState({});\n    const [addSong, setAddSong] = useState(false);\n\n    const { loading, error, data } = useQuery(GET_ARTIST_SINGLE, {variables: {name: artist}});\n\n    const findArtistHandler = (e) => {\n        e.preventDefault()\n        if (error) showArtist = <p>Whoops got an error Fetching</p>;\n        if (loading || !data) showArtist = <p>Loading...</p>;\n\n        setArtistData(data)\n    }\n\n    const addLyrics = () => {\n        setAddSong(!addSong)\n    }\n\n    let page\n\n    let showArtist = <Artistsongs data={artistData} addLyrics={addLyrics}/>\n\n    if (!addSong) {\n        page = (\n            <div>\n                <div className=\"header\">\n                    <h2>Find from existing artists</h2>\n                </div>\n                <button className=\"btn new-artist-btn\" onClick={() => {props.addNewArtist()}}>Add new Artist</button>\n                <form className=\"lyrics-form\">\n                    <input className=\"form-control input-field\" placeholder=\"Artist\" onChange={(event) => {setArtist(event.target.value)}}/>\n                    <button className=\"btn find-artist-btn\" onClick={(event) => {findArtistHandler(event)}}>Find Artist</button>\n                </form>\n                {showArtist}\n            </div>\n        )\n    }\n    else if (addSong){\n        page = <Form data={artistData.artist}/>\n    }\n\n    return(\n        <div>\n           {page}\n        </div>\n    )\n}\n\nexport default Existingartist","import React, { useState } from 'react';\nimport { useMutation } from \"@apollo/react-hooks\"\nimport {gql} from 'apollo-boost';\nimport Form from './Form'\nimport {ADD_ARTIST} from '../../queries/queries';\n\n\nfunction Newartistform() {\n    // Getting state from the input fields\n    const [clicked, setClick] = useState([0]);\n    const [artistName, setArtistName] = useState(\"\");\n    const [artistCover, setArtistCover] = useState(\"\");\n    const [submitArtist, setSubmitArtist] = useState(false);\n    const [artistData, setArtistData] = useState({});\n\n    // What is being rendered in the dom\n    let page;\n\n    if (!(\"data\" in artistData)) {\n        page = (\n            <div>\n                <div className=\"header\">\n                    <h2>Add a new Artist</h2>\n                </div>\n                <form className=\"lyrics-form text-center\" onSubmit={e => {submitHandler(e)}}>\n                    <input className=\"form-control input-field\" placeholder=\"Artist\" onChange={(event) => setArtistName(event.target.value)} />\n                    <input className=\"form-control input-field\" placeholder=\"Artist Cover Image link\" onChange={(event) => setArtistCover(event.target.value)} />\n                    <button type=\"submit\" className=\"btn verse-btn mx-auto\">Submit</button>\n                </form>\n            </div>\n        )\n    }\n    else if (\"data\" in artistData){\n        const data = artistData.data.addArtist\n        page = <Form data={data}/>\n    }\n\n    // Creating mutation function\n    const [addArtist] = useMutation(ADD_ARTIST);\n\n    const submitHandler = (e) => {\n        e.preventDefault();\n        addArtist({ variables: { name: artistName, artist_cover: artistCover } })\n            .then(results => {\n                setArtistData(results)\n            })\n            .catch((error) => {\n                console.error(error)\n            })\n    }\n\n\n    return(\n        <div>\n            {page}\n        </div>\n    )\n}\n\n\nexport default Newartistform","import React, { useState } from 'react';\nimport './Addlyrics.css';\nimport {gql} from 'apollo-boost';\nimport { useQuery } from '@apollo/react-hooks';\nimport {GET_ARTIST} from '../../queries/queries'\nimport Existingartist from './Existingartist'\nimport Newartistform from './Newartistform'\n\n\nfunction Addlyrics() {\n\n    const [showForm, setShowForm] = useState(false);\n\n    const addNewArtist = () => {\n        setShowForm(!showForm)\n    }\n\n    let page;\n\n    page = !showForm ? <Existingartist addNewArtist={addNewArtist}/> : <Newartistform />\n\n    const { loading, error, data } = useQuery(GET_ARTIST);\n    if (error) return <p>Error</p>;\n    if (loading || !data) return <p>Loading...</p>;\n\n    console.log(data)\n\n    return(\n        <div className=\"addlyrics-div\">\n            {page}\n        </div>\n    )\n}\n\nexport default Addlyrics","import React, { useState }from 'react';\nimport './App.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Home from './components/home/Home';\nimport Navigation from './components/layouts/Navigation'\nimport Footer from './components/layouts/Footer'\nimport Addlyrics from './components/addlyrics/Addlyrics'\n\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql'\n});\n\n\nfunction App() {\n  const [songData, setSongData] = useState([])\n\n  const showSong = (data) => {\n    setSongData(data)\n  }\n\n  const homePageClick = () => {\n    setSongData([])\n  }\n\n  return (\n    <ApolloProvider client={client}>\n        <Router>\n          <div>\n            <Navigation showSong={showSong} homePageClick={homePageClick}/>\n            <Switch>\n              <Route path=\"/addlyrics\">\n                <Addlyrics />\n              </Route>\n              <Route path=\"/\">\n                <Home songData={songData}/>\n              </Route>\n            </Switch>\n            <Footer />\n          </div>\n        </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);"],"sourceRoot":""}